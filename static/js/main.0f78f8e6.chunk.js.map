{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","TAGS","name","tags","sort","App","props","context","onTagClick","clickedTag","selectedTags","state","includes","filter","tag","push","setState","calculateOperators","operators","fetch","then","response","ok","Error","json","result","catch","err","alert","ThemeProvider","className","TableContainer","Table","TableBody","map","tagCategory","TableRow","TableCell","Button","variant","color","onClick","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"yVAgBMA,G,MAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,eAKNE,EAAO,CACX,CACEC,KAAM,gBACNC,KAAM,CAAC,UAAW,kBAAmB,iBAEvC,CACED,KAAM,WACNC,KAAM,CAAC,QAAS,WAElB,CACED,KAAM,QACNC,KAAM,CAAC,QAAS,QAAS,WAAY,SAAU,SAAU,WAAY,YAAa,cAAcC,QAElG,CACEF,KAAM,QACNC,KAAM,CACJ,UAAW,UAAW,MAAO,MAAO,OAAQ,WAAY,UAAW,SAAU,QAC7E,gBAAiB,QAAS,SAAU,gBAAiB,cAAe,SACpEC,SAqGSC,E,YAhGb,WAAYC,EAAOC,GAAU,IAAD,8BAC1B,4CAAMD,EAAOC,KA2BfC,WAAa,SAACC,GACZ,IAAIC,EAAY,YAAO,EAAKC,MAAMD,cAE9BA,EAAaE,SAASH,GACxBC,EAAeA,EAAaG,QAAO,SAAAC,GAAG,OAAIA,IAAQL,KAGlDC,EAAaK,KAAKN,GAGpB,EAAKO,SAAS,CAAEN,aAAcA,GAAgB,EAAKO,qBAtCzB,EAyC5BA,mBAAqB,aAtCnB,EAAKN,MAAQ,CACXO,UAAW,KAEXR,aAAc,IANU,E,iFAUP,IAAD,OAClBS,MAAM,wBACHC,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAGZ,OAAOF,EAASG,UAEjBJ,MAAK,SAAAK,GACJ,EAAKT,SAAS,CAAEE,UAAWO,OAE5BC,OAAM,SAAAC,GAELC,MAAM,4C,+BAqBF,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,CAAelC,MAAOA,GACpB,yBAAKmC,UAAU,OACb,yBAAKA,UAAU,WACb,gEAEA,yBAAKA,UAAU,aACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAEEhC,EAAKiC,KAAI,SAAAC,GACP,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWP,UAAU,uCAClBK,EAAYjC,MAEf,kBAACmC,EAAA,EAAD,CAAWP,UAAU,mBAEjBK,EAAYhC,KAAK+B,KAAI,SAAApB,GACnB,OACE,kBAACwB,EAAA,EAAD,CACER,UAAU,aACVS,QAAS,EAAK5B,MAAMD,aAAaE,SAASE,GAAO,YAAc,WAC/D0B,MAAM,UACNC,QAAS,kBAAM,EAAKjC,WAAWM,KAE9BA,sB,GA1EnB4B,iBCrCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0f78f8e6.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { \n  ThemeProvider,\n  Paper,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableContainer,\n  Button\n} from '@material-ui/core';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nimport './App.css';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#eaeaea'\n    },\n    secondary: {\n      main: '#1a1a1a'\n    }\n  },\n});\n\nconst TAGS = [\n  {\n    name: 'Qualification',\n    tags: ['Starter', 'Senior Operator', 'Top Operator']\n  },\n  {\n    name: 'Position',\n    tags: ['Melee', 'Ranged']\n  },\n  {\n    name: 'Class',\n    tags: ['Guard', 'Medic', 'Vanguard', 'Caster', 'Sniper', 'Defender', 'Supporter', 'Specialist'].sort()\n  },\n  {\n    name: 'Affix',\n    tags: [\n      'Healing', 'Support', 'DPS', 'AoE', 'Slow', 'Survival', 'Defense', 'Debuff', 'Shift', \n      'Crowd Control', 'Nuker', 'Summon', 'Fast-Redeploy', 'DP-Recovery', 'Robot'\n    ].sort()\n  }\n]\n\nclass App extends PureComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      operators: null,\n\n      selectedTags: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('/data/operators.json')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error();\n        }\n\n        return response.json();\n      })\n      .then(result => {\n        this.setState({ operators: result });\n      })\n      .catch(err => {\n        debugger;\n        alert('Error when fetching operators data.');\n      })\n  }\n\n  onTagClick = (clickedTag) => {\n    let selectedTags = [...this.state.selectedTags];\n\n    if (selectedTags.includes(clickedTag)) {\n      selectedTags = selectedTags.filter(tag => tag !== clickedTag);\n    }\n    else {\n      selectedTags.push(clickedTag);\n    }\n\n    this.setState({ selectedTags: selectedTags }, this.calculateOperators);\n  }\n\n  calculateOperators = () => {\n    \n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <div className='app'>\n          <div className='content'>\n            <h1>Arknights Recruitment Calculator</h1>\n\n            <div className='tags-area'>\n              <TableContainer>\n                <Table>\n                  <TableBody>\n                  {\n                    TAGS.map(tagCategory => {\n                      return (\n                        <TableRow>\n                          <TableCell className='tags-table-cell tags-table-category'>\n                            {tagCategory.name}\n                          </TableCell>\n                          <TableCell className='tags-table-cell'>\n                            {\n                              tagCategory.tags.map(tag => {\n                                return (\n                                  <Button \n                                    className='tag-button' \n                                    variant={this.state.selectedTags.includes(tag) ? 'contained' : 'outlined'} \n                                    color='primary' \n                                    onClick={() => this.onTagClick(tag)}\n                                  >\n                                    {tag}\n                                  </Button>\n                                )\n                              })\n                            }\n                          </TableCell>                          \n                        </TableRow>\n                      );\n                    })\n                  }    \n                  </TableBody>\n                </Table>\n              </TableContainer>\n                        \n            </div>\n          </div>\n        </div>\n      </ThemeProvider>\n     \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}